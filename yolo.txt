--1
!git clone https://github.com/THU-MIG/yolov10.git

--2
!mkdir -p /content/yolov10/ultralytics/weights
!wget -P /content/yolov10/ultralytics/weights -q https://github.com/jameslahm/yolov10/releases/download/v1.0/yolov10n.pt
!ls -lh /content/yolov10/ultralytics/weights

--3
# Cài đặt YOLOv10 từ GitHub
!pip install -q git+https://github.com/ultralytics/ultralytics.git

--4
from google.colab import drive
drive.mount('/content/drive')

--5
!unzip /content/TrafficSignDataset.zip

--6
!yolo task=detect mode=train epochs=100 batch=32 plots=True \
model=/content/yolov10/ultralytics/weights/yolov10n.pt \
data=/content/TrafficSignDataset/Custom_data.yaml




--# Cú pháp: cp <đường_dẫn_tệp_gốc> <đường_dẫn_tệp_mục_tiêu>

# Sao chép file
!cp /content/runs/detect/train/results.png /content/drive/MyDrive/EvaluationPlot<StudentID>.png

# Sao chép thư mục (thêm -r để sao chép thư mục)
!cp -r /content/runs/detect/train /content/drive/MyDrive/train_backup



--7
!yolo task=detect mode=predict conf=0.25 save=True model=/content/runs/detect/train/weights/best.pt source=/content/TrafficSignDataset/TrafficSign/test/images/000038_jpg.rf.0073311503163e083df9bd1edab5e4ab.jpg

-8
import pandas as pd
import matplotlib.pyplot as plt


--9
# Đọc dữ liệu từ file CSV YOLO
results_path = '/content/runs/detect/train3/results.csv'
data = pd.read_csv(results_path)

# Lấy thông tin Loss và mAP
epochs = data['epoch']
train_loss = data['train/box_loss']
val_loss = data['val/box_loss']

# Vẽ Evaluation Plot với dữ liệu thực tế
plt.figure(figsize=(8, 6))
plt.plot(epochs, train_loss, label='Train Loss', marker='o')
plt.plot(epochs, val_loss, label='Validation Loss', marker='o')
plt.title('Evaluation Plot')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.savefig('EvaluationPlot<StudentID>.png')  # Lưu biểu đồ
plt.show()



--10

from ultralytics import YOLO
!pip install paho-mqtt
import paho.mqtt.client as mqtt

--11
# BROKER = "test.mosquitto.org"
BROKER = "broker.hivemq.com"
PORT = 1883
TOPIC_PUBLISH = "21004171/output"

# Hàm gửi tin nhắn qua MQTT
def publish_message(predicted_label):
    # Thiết lập client MQTT
    client = mqtt.Client()
    client.connect(BROKER, PORT, 60)

    # Gửi nội dung predicted_label lên topic
    client.publish(TOPIC_PUBLISH, predicted_label)
    print(f"Sent message: {predicted_label} to topic: {TOPIC_PUBLISH}")

    # Đóng kết nối
    client.disconnect()

--12
# Tải model
model = YOLO("/content/runs/detect/train/weights/best.pt")

# Đường dẫn ảnh cần dự đoán
image_path = "/content/TrafficSignDataset/TrafficSign/test/images/000000_jpg.rf.9c2d93c681b7d38d50bf4f096a6baf03.jpg"

# Thực hiện dự đoán
results = model.predict(source=image_path, conf=0.25, save=True)

# Lấy thông tin class từ kết quả
for result in results:
    result.show()
    for box in result.boxes:
       # Lấy ID class và tên class
        class_id = int(box.cls.cpu().numpy())
        class_name = model.names[class_id]

        # Lấy độ tin cậy (confidence)
        confidence = box.conf.cpu().numpy()[0]

        # In thông tin class và độ tin cậy
        print(f"Class detected: {class_name}, Confidence: {confidence:.2f}")


--13

# BROKER = "test.mosquitto.org"
BROKER = "broker.hivemq.com"
PORT = 1883
TOPIC_PUBLISH = "21004171/output"

# Hàm gửi tin nhắn qua MQTT
def publish_message(predicted_label):
    # Thiết lập client MQTT
    client = mqtt.Client()
    client.connect(BROKER, PORT, 60)

    # Gửi nội dung predicted_label lên topic
    client.publish(TOPIC_PUBLISH, predicted_label)
    print(f"Sent message: {predicted_label} to topic: {TOPIC_PUBLISH}")

    # Đóng kết nối
    client.disconnect()

# Tải model
model = YOLO("/content/drive/MyDrive/dataonknn/train2/weights/best.pt")

# Đường dẫn ảnh cần dự đoán
image_path = "/content/TrafficSignDataset/TrafficSign/test/images/000511_jpg.rf.4db3876820ff484b0f5924c8f9d40a86.jpg"

# Thực hiện dự đoán
results = model.predict(source=image_path, conf=0.25, save=True)

# Lấy thông tin class từ kết quả
for result in results:
    for box in result.boxes:
        # Lấy ID class và tên class
        class_id = int(box.cls.cpu().numpy())
        class_name = model.names[class_id]
        publish_message(class_n ame)
        print(f"Class detected: {class_name}")


--14
!yolo task=detect mode=predict conf=0.25 save=True model=runs/detect/train/weights/best.pt source=b.mp4

--
mv /content/runs/detect/train2 /content/drive/MyDrive/dataonknn

--15
from tensorflow.keras.models import load_model

--16
import paho.mqtt.client as mqtt

# Hàm gửi tin nhắn qua MQTT
def publish_message(predicted_label):
    # Thiết lập client MQTT
    client = mqtt.Client()
    client.connect(BROKER, PORT, 60)

    # Gửi nội dung predicted_label lên topic
    client.publish(TOPIC_PUBLISH, predicted_label)
    print(f"Sent message: {predicted_label} to topic: {TOPIC_PUBLISH}")

    # Khởi động loop MQTT để tránh chặn
    client.loop_start()

    # Đóng kết nối
    client.disconnect()

# --- 3. Dự đoán ảnh mới ---
def predict_image(img_path):
    # Tiền xử lý ảnh trước khi đưa vào mô hình
    predicted_label="dfhugs"
    print(f"Predicted class: {predicted_label}")

    # Gửi predicted_label qua MQTT
    publish_message(predicted_label)

    return predicted_label

# --- 4. Thử dự đoán với ảnh mới ---
img_path = "/content/drive/MyDrive/dataonknn/image/Angelina Jolie_068.jpg"
predict_image(img_path)



names:
- Cycle Zone
- Danger Ahead
- Deer Zone
- End of Right Road -Go straight-
- Give Way
- Go Left or Straight
- Go Right or Straight
- Go Straight
- Huddle Road
- Left Curve Ahead
- Left Sharp Curve
- No Entry
- No Over Taking Trucks
- No Over Taking
- No Stopping
- No Waiting
- Pedestrian
- Right Curve Ahead
- Right Sharp Curve
- Road Work
- RoundAbout
- Slippery Road
- Snow Warning Sign
- Speed Limit 100
- Speed Limit 120
- Speed Limit 20
- Speed Limit 30
- Speed Limit 50
- Speed Limit 60
- Speed Limit 70
- Speed Limit 80
- Stop
- Traffic Signals Ahead
- Truck Sign
- Turn Left
- Turn Right
nc: 36
train: /content/drive/MyDrive/21004171/TrafficSign/train/images
val: /content/drive/MyDrive/21004171/TrafficSign/valid/images









