--1
!git clone https://github.com/THU-MIG/yolov10.git

--2
!mkdir -p /content/yolov10/ultralytics/weights
!wget -P /content/yolov10/ultralytics/weights -q https://github.com/jameslahm/yolov10/releases/download/v1.0/yolov10n.pt
!ls -lh /content/yolov10/ultralytics/weights

--3
# Cài đặt YOLOv10 từ GitHub
!pip install -q git+https://github.com/ultralytics/ultralytics.git

--4
from google.colab import drive
drive.mount('/content/drive')

--5
!unzip /content/TrafficSignDataset.zip

--6
!yolo task=detect mode=train epochs=100 batch=32 plots=True \
model=/content/yolov10/ultralytics/weights/yolov10n.pt \
data=/content/TrafficSignDataset/Custom_data.yaml


--7
!yolo task=detect mode=predict conf=0.25 save=True model=/content/runs/detect/train/weights/best.pt source=/content/TrafficSignDataset/TrafficSign/test/images/000038_jpg.rf.0073311503163e083df9bd1edab5e4ab.jpg

-8
from ultralytics import YOLO




--9
# Tải model
model = YOLO("/content/runs/detect/train/weights/best.pt")

# Đường dẫn ảnh cần dự đoán
image_path = "/content/TrafficSignDataset/TrafficSign/test/images/000000_jpg.rf.9c2d93c681b7d38d50bf4f096a6baf03.jpg"

# Thực hiện dự đoán
results = model.predict(source=image_path, conf=0.25, save=True)

# Lấy thông tin class từ kết quả
for result in results:
    result.show()
    for box in result.boxes:
       # Lấy ID class và tên class
        class_id = int(box.cls.cpu().numpy())
        class_name = model.names[class_id]

        # Lấy độ tin cậy (confidence)
        confidence = box.conf.cpu().numpy()[0]

        # In thông tin class và độ tin cậy
        print(f"Class detected: {class_name}, Confidence: {confidence:.2f}")


--10

import pandas as pd
import matplotlib.pyplot as plt
# Đọc dữ liệu từ file CSV YOLO
results_path = '/content/runs/detect/train/results.csv'
data = pd.read_csv(results_path)

# Lấy thông tin Loss và mAP
epochs = data['epoch']
train_loss = data['train/box_loss']
val_loss = data['val/box_loss']

# Vẽ Evaluation Plot với dữ liệu thực tế
plt.figure(figsize=(8, 6))
plt.plot(epochs, train_loss, label='Train Loss', marker='o')
plt.plot(epochs, val_loss, label='Validation Loss', marker='x')
plt.title('Evaluation Plot')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.grid(True)
plt.savefig('EvaluationPlot_21004289.png')  # Lưu biểu đồ
plt.show()


--11
!yolo task=detect mode=predict conf=0.25 save=True model=runs/detect/train/weights/best.pt source=b.mp4

--12
!cp -r /content/runs/detect/train/weights/best.pt /content/21004289/results

--!mv /content/runs/detect/train3/weights/last.pt /content/21004289/result

--Custum_data.yaml



names:
- Cycle Zone
- Danger Ahead
- Deer Zone
- End of Right Road -Go straight-
- Give Way
- Go Left or Straight
- Go Right or Straight
- Go Straight
- Huddle Road
- Left Curve Ahead
- Left Sharp Curve
- No Entry
- No Over Taking Trucks
- No Over Taking
- No Stopping
- No Waiting
- Pedestrian
- Right Curve Ahead
- Right Sharp Curve
- Road Work
- RoundAbout
- Slippery Road
- Snow Warning Sign
- Speed Limit 100
- Speed Limit 120
- Speed Limit 20
- Speed Limit 30
- Speed Limit 50
- Speed Limit 60
- Speed Limit 70
- Speed Limit 80
- Stop
- Traffic Signals Ahead
- Truck Sign
- Turn Left
- Turn Right
nc: 36
train: /content/TrafficSignDataset/TrafficSign/train/images
val: /content/TrafficSignDataset/TrafficSign/valid/images


